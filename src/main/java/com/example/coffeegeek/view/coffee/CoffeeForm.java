package com.example.coffeegeek.view.coffee;

import java.util.Arrays;

import com.example.coffeegeek.model.Coffee;
import com.example.coffeegeek.model.RoastDegree;
import com.example.coffeegeek.repository.CoffeeRepository;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Component;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.Form;
import com.vaadin.ui.NativeSelect;

@Singleton
public class CoffeeForm extends Form {

	private Coffee coffee;

	@Inject
	private CoffeeRepository coffeeRepository;

	private class CoffeeFormFactory extends DefaultFieldFactory {
		@Override
		public Field createField(Item item, Object propertyId,
				Component uiContext) {
			if ("degree".equals(propertyId)) {

				return new NativeSelect("Torrefaction", Arrays
						.asList(RoastDegree.values()));
			}
			return super.createField(item, propertyId, uiContext);
		}
	}

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public CoffeeForm() {
		setCaption("Détails du café");
		setFormFieldFactory(new CoffeeFormFactory());
		setCoffee(new Coffee());

	}

	@Override
	public void commit() throws SourceException {
		super.commit();
		coffeeRepository.save(coffee);
	}

	public void setCoffee(Coffee coffee) {
		this.coffee = coffee;
		BeanItem<Coffee> item = new BeanItem<Coffee>(coffee);
		setItemDataSource(item);
		setVisibleItemProperties(Arrays.asList(new String[] { "name",
				"country", "date", "degree" }));
	}
}
